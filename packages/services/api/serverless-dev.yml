service: ${file(../config.yml):prefix}

package:
  individually: true

plugins:
  - serverless-plugin-monorepo
  - serverless-plugin-git-variables
  - serverless-bundle
  - serverless-offline
  - serverless-deployment-bucket
  # - serverless-stack-termination-protection
  - "@anttiviljami/serverless-stack-output"

custom:
  stage: ${opt:stage, self:provider.stage}
  output:
    handler: scripts/output.handler
    file: ../../app/src/${file(../config.yml):prefix}-stack.json

provider:
  name: aws
  profile: ${file(../config.yml):profiles.${self:provider.stage}}
  region: ${opt:region, "us-east-2"}
  runtime: nodejs10.x
  memorySize: 1024
  timeout: 30
  logRetentionInDays: 5
  versionFunctions: false
  tracing:
    apiGateway: true
    lambda: true
  stage: ${opt:stage, "dev"}
  apiName: ${self:service.name}-${self:provider.stage}
  apiKeys:
    - ${self:custom.stage}-import
  deploymentBucket:
    name: ${self:service.name}-${self:provider.stage}-deployment-${file(../config.yml):suffix}

  environment:
    TableName:
      Fn::Join:
        - ""
        - - Fn::ImportValue: ${self:service}-${self:custom.stage}-DataTable

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem

      Resource:
        - Fn::ImportValue: ${self:service}-${self:custom.stage}-DataTableArn
        - Fn::Join:
            - "/"
            - - Fn::ImportValue: ${self:service}-${self:custom.stage}-DataTableArn
              - "index/*"
    - Action:
        - cognito-idp:ListUsers
        - cognito-idp:AdminGetUser
      Resource: arn:aws:cognito-idp:us-east-2:719544875353:userpool/us-east-2_KB7Eccf2z
      Effect: Allow
    - Effect: "Allow"
      Action:
        - "transcribe:*"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "*"
        # - Fn::Join:
        #     - ""
        #     - - Fn::ImportValue: ${file(../config.yml):prefix}-${self:custom.stage}-StorageBucketArn
        #       - "/public/*"

functions:
  getTranscript:
    handler: transcript.get
    description: ${git:branch}:${git:sha1}
    events:
      - http:
          path: transcript/{PK}
          method: get
          cors: true
          authorizer: aws_iam

  updateTranscript:
    handler: transcript.put
    description: ${git:branch}:${git:sha1}
    events:
      - http:
          path: transcript/{PK}
          method: put
          cors: true
          authorizer: aws_iam

  create:
    handler: create.main
    description: ${git:branch}:${git:sha1}
    events:
      - http:
          path: data
          method: post
          cors: true
          authorizer: aws_iam

  import:
    handler: import.main
    description: ${git:branch}:${git:sha1}
    memorySize: 3008
    timeout: 30
    events:
      - http:
          path: import
          method: post
          cors: true
          private: true

  get:
    handler: get.main
    description: ${git:branch}:${git:sha1}
    events:
      - http:
          path: data/{PK}/{SK}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    handler: list.main
    description: ${git:branch}:${git:sha1}
    events:
      - http:
          path: data
          method: get
          cors: true
          authorizer: aws_iam

  update:
    handler: update.main
    description: ${git:branch}:${git:sha1}
    events:
      - http:
          path: data/{PK}/{SK}
          method: put
          cors: true
          authorizer: aws_iam

  # delete:
  #   handler: delete.main
  #   description: ${git:branch}:${git:sha1}
  #   events:
  #     - http:
  #         path: data/{PK}/{SK}
  #         method: delete
  #         cors: true
  #         authorizer: aws_iam

  getUsers:
    handler: user.getAll
    description: ${git:branch}:${git:sha1}
    events:
      - http:
          path: user
          method: get
          cors: true
          authorizer: aws_iam

  getUser:
    handler: user.get
    description: ${git:branch}:${git:sha1}
    events:
      - http:
          path: user/{sub}
          method: get
          cors: true
          authorizer: aws_iam

  getUserProjects:
    handler: user.projects
    description: ${git:branch}:${git:sha1}
    events:
      - http:
          path: user/{sub}/projects
          method: get
          cors: true
          authorizer: aws_iam

  addUser2Project:
    handler: user.add2project
    description: ${git:branch}:${git:sha1}
    events:
      - http:
          path: user/{sub}/projects
          method: post
          cors: true
          authorizer: aws_iam

  transcribe:
    handler: transcribe.transcribe
    description: ${git:branch}:${git:sha1}
    events:
      - http:
          path: transcribe
          method: post
          cors: true
          authorizer: aws_iam

  transcribed:
    handler: transcribe.transcribed
    description: ${git:branch}:${git:sha1}
    timeout: 900
    memorySize: 3008
    events:
      - s3:
          bucket: ${file(../config.yml):prefix}-${self:custom.stage}-storage-${file(../config.yml):suffix}
          event: s3:ObjectCreated:Put
          rules:
            # - prefix: uploads/
            - suffix: .json
          existing: true

resources:
  - Description: >
      ${self:service} ${git:branch}:${git:sha1}
      ${git:message}
  - Resources:
      ApiGatewayRestApi:
        Type: AWS::ApiGateway::RestApi
        Properties:
          Name: ${self:service}-${self:custom.stage}
      GatewayResponseDefault4XX:
        Type: "AWS::ApiGateway::GatewayResponse"
        Properties:
          ResponseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          ResponseType: DEFAULT_4XX
          RestApiId:
            Ref: "ApiGatewayRestApi"
      GatewayResponseDefault5XX:
        Type: "AWS::ApiGateway::GatewayResponse"
        Properties:
          ResponseParameters:
            gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
            gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          ResponseType: DEFAULT_5XX
          RestApiId:
            Ref: "ApiGatewayRestApi"
  - Outputs:
      ApiGatewayRestApiId:
        Value:
          Ref: ApiGatewayRestApi
        Export:
          Name: ${self:service}-${self:custom.stage}-ApiGatewayRestApiId
      ApiGatewayRestApiRootResourceId:
        Value:
          Fn::GetAtt:
            - ApiGatewayRestApi
            - RootResourceId
        Export:
          Name: ${self:service}-${self:custom.stage}-ApiGatewayRestApiRootResourceId
      Region:
        Value: ${self:provider.region}
        Export:
          Name: ${self:service}-${self:custom.stage}-Region
